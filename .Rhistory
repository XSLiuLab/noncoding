cross_val(mut, result_file)
message("Done")
gc()
#file.remove(modified_file)
message(Sys.time() - timer)
}
i = cancer_type[2]
debug(call_model)
call_model(i)
head(mut)
head(mut)
call_model(i)
debug(add_dnase)
df
ncol(mtcars)
c(2:ncol(mtcars), 1)
gc()
install.packages("butcher")
library(data.table)
cancer_type = c("blood", "breast", "esophagus",
"kidney", "liver", "lung",
"ovary", "pancreas", "melanoma")
i = cancer_type[1]
file_names <- list.files(pattern = paste0(i, ".RData"))
for (fl in file_names) {
load(fl)
}
head(loc_info)
head(mut)
"mock" %in% loc_info$donor
loc_info$pred <- as.numeric(predict.glm(prei, type = "response", newdata = mut))
head(loc_info$pred)
head(loc_info)
fwrite(loc_info, file = paste0("pred_", i, ".tsv.gz"), sep = "\t")
library(data.table)
cancer_type = c("blood", "breast", "esophagus",
"kidney", "liver", "lung",
"ovary", "pancreas", "melanoma")
i = cancer_type[2]
message("Processing ", i, "...")
file_names <- list.files(pattern = paste0(i, ".RData"))
for (fl in file_names) {
load(fl)
}
head(mut)
file_names
head(prei$data)
head(prei$data)
dim(prei$data)
dim(mut)
head(prei$data)
head(mut)
head(loc_info)
gc()
modify_tfbs = function(proj_file) {
library(data.table)
message("Modifying tfbs column in ", proj_file, "...")
dt = fread(proj_file)
dist_dt = fread("dist2tfbs_for_logistic_input.bed", header = FALSE)
dist_dt = dist_dt[, .(V1, V3, V7)]
# Assign the max distance to 100
dist_dt$V7[dist_dt$V7 > 100] = 100
# Assign score to 0-100
dist_dt$score = 100 - dist_dt$V7
dist_dt = unique(dist_dt)
dist_dt$V7 = NULL
dt_update = merge(dt, dist_dt,
by = c("V1", "V3"), all.x = TRUE)
dt_update$V9 = dt_update$score
dt_update$score = NULL
## Correct the order
dt_update = dt_update[, c(1, 3, 2, 4:ncol(dt_update)), with = F]
message("Done. Outputting result file.")
result_file = paste0("update_", basename(proj_file))
fwrite(dt_update,
file = result_file,
col.names = TRUE, sep = "\t")
gc()
return(result_file)
}
library(stringr)
library(pROC)
library(caret)
library(data.table)
source("logit_function20181112.R")
type_list = list(
lung = c("LUSC-CN", "LUSC-KR", "mock"),
esophagus = c("ESAD-UK","ESCA-CN","mock"),
liver = c("LIAD-FR", "LICA-CN", "LICA-FR", "LINC-JP", "LIRI-JP","mock"),
breast = c("BRCA-EU","BRCA-FR","BRCA-US","mock"),
pancreas = c("PACA-AU","PACA-CA","PAEN-AU","PAEN-IT","mock"),
kidney = c("RECA-EU","mock"),
blood = c("ALL-US","CLLE-ES","MALY-DE","NKTL-SG","mock"),
ovary = c("OV-AU","mock"),
melanoma = c("MELA-AU","SKCA-BR","SKCM-US","mock")
)
file_list = list(
v1 = "/home/zhangjing/roadmap/lung/bed/cal_model_lung_final_result.tsv",
v2 = "/home/zhangjing/roadmap/Esophagus/bed/cal_model_esophagus_final_result.tsv",
v3 = "/home/zhangjing/roadmap/liver/bed/cal_model_liver_final_result.tsv",
v4 = "/home/zhangjing/roadmap/breast/bed/cal_model_breast_final_result.tsv",
v5 = "/home/zhangjing/roadmap/Pancreas/bed/cal_model_pancreas_final_result.tsv",
v6 = "/home/zhangjing/roadmap/Kidney/bed/cal_model_kidney_final_result.tsv",
v7 = "/home/zhangjing/roadmap/blood/bed/cal_model_blood_final_result.tsv",
v8 = "/home/zhangjing/roadmap/Ovary/bed/cal_model_ovary_final_result.tsv",
v9 = "/home/zhangjing/roadmap/E061_Melanoma/bed/cal_model_mela_final_result.tsv"
)
names(file_list) = names(type_list)
call_model = function(proj_index) {
timer <- Sys.time()
message("Calling model for cancer type: ", proj_index)
result_file = paste0("logit_", proj_index, ".RData")
#if (file.exists(result_file)) {
#   message("The result has been called!")
#   return(NULL)
# }
modified_file = modify_tfbs(file_list[[proj_index]])
mut <- logit_form(type_list[[proj_index]], modified_file)
if (proj_index %in% c("breast", "pancreas", "kidney", "ovary", "melanoma")) {
## Add dnase data
dnase_file = switch(
proj_index,
breast = "/home/zhangjing/roadmap/breast/bed/E028-DNase.hotspot.broad.bed",
pancreas = "/home/zhangjing/roadmap/Pancreas/bed/E098-DNase.hotspot.broad.bed",
kidney = "/home/zhangjing/roadmap/Kidney/bed/E086-DNase.hotspot.broad.bed",
ovary = "/home/zhangjing/roadmap/Ovary/bed/E097-DNase.hotspot.broad.bed",
melanoma = "/home/zhangjing/roadmap/E061_Melanoma/bed/E059-DNase.hotspot.broad.bed"
)
message("Adding dnase data...")
mut <- add_dnase(mut, dnase_file)
}
loc_info = mut[, c("donor", "chr", "end")]
save(loc_info, file = paste0("logit_loc_", proj_index, ".RData"))
mut <- format_trans(mut)
save(mut, file = paste0("logit_input_", proj_index, ".RData"))
file.remove(modified_file)
#cross_val(mut, result_file)
if (file.exists(result_file)) {
message("The result has been called!")
return(NULL)
}
cross_val(mut, result_file)
message("Done")
gc()
#file.remove(modified_file)
message(Sys.time() - timer)
}
cancer_type = c("blood", "breast", "esophagus",
"kidney", "liver", "lung",
"ovary", "pancreas", "melanoma")
i = cancer_type[2]
debug(call_model)
call_model(i)
head(mut)
debug(add_dnase)
head(df)
df_names
head(df)
format_trans
install.packages("poibin")
final_mutation_regions <- readRDS("D:/Code/noncoding/final_mutation_regions.rds")
head(final_mutation_regions)
final_dt = final_mutation_regions
final_dt[, region_midpoint := paste(chr, as.integer(start + 5), sep = ":")]
library(data.table)
final_dt[, region_midpoint := paste(chr, as.integer(start + 5), sep = ":")]
head(final_dt)
head(final_mutation_regions)
identical(final_dt$region_midpoint, final_mutation_regions$region_midpoint)
foverlaps()
?foverlaps()
final_mutation_regions <- readRDS("D:/Code/noncoding/final_mutation_regions.rds")
final_dt = copy(final_mutation_regions)
final_dt[, region_midpoint := paste(chr, as.integer(start + 5), sep = ":")]
identical(final_dt$region_midpoint, final_mutation_regions$region_midpoint)
final_dt
saveRDS(final_dt, file = "final_mutation_regions.rds")
final_dt[, mut_index := paste(chr, as.integer(i.end), sep = ":")]
final_dt
saveRDS(final_dt, file = "final_mutation_regions.rds")
?poibin::ppoibin
point_prob = final_dt[, .(p_val = 1 - poibin::ppoibin(freq - 1, prob)),
by = mut_index]
point_prob
point_prob = final_dt[, .(p_val = 1 - poibin::ppoibin(freq - 1, prob)),
by = mut_index]
point_prob$mut_index
final_dt[, .(p_val = 1 - poibin::ppoibin(freq - 1, prob)),
by = mut_index]
final_dt[, .(p_val = 1 - poibin::ppoibin(freq - 1, prob)),
by = .(mut_index)]
length(table(final_dt$mut_index))
kk=0:10
pp=c(.1,.2,.3,.4,.5)
ppoibin(kk=kk, pp=pp, method = "DFT-CF",wts=rep(2,5))
library(poibin)
kk=0:10
pp=c(.1,.2,.3,.4,.5)
ppoibin(kk=kk, pp=pp, method = "DFT-CF",wts=rep(2,5))
summary(final_dt$freq)
final_dt
ppoibin(kk=kk, pp=pp)
kk
pp
ppoibin(kk=7, pp=pp)
ppoibin(kk=7, pp=pp[1])
## Get mutation-specific prob
final_dt[, .(p_val = 1 - poibin::ppoibin(freq - 1, prob)),
by = .(region_midpoint)]
load("D:/Code/noncoding/df2.RData")
df2
View(final_dt)
ppoibin(kk=7, pp=pp)
ppoibin(kk=0, pp=pp)
## Get mutation-specific prob
final_dt[, .(p_val = 1 - poibin::ppoibin(unique(freq) - 1, prob)),
by = .(region_midpoint)]
## Get mutation-specific prob
prob_mut <- final_dt[, .(p_val = 1 - poibin::ppoibin(unique(freq) - 1, prob)),
by = .(mut_index)]
prob_mut
length(unique(prob_mut$mut_index))
prob_mut
duplicated(prob_mut$mut_index)
prob_mut$mut_index[duplicated(prob_mut$mut_index)]
recurrent_region <- readRDS("D:/Code/noncoding/recurrent_region.rds")
View(recurrent_region)
nrow(unique(recurrent_region))
recurrent_region[, zz:=paste(chr, start, end, sep="-")]
length(unique(recurrent_region$zz))
final_dt
unique(final_dt)
head(final_dt)
library(data.table)
final_dt <- readRDS("final_mutation_regions.rds")
final_dt
## Add a weight to prob for each donor to get sample-specific prob as Prof.Liu and JingZhang devised.
#system("zcat final_mutation.tsv.gz | cut -f 1 | sort | uniq -c | sed 's/^[ \t]*//g' | sed 's/ /\t/g' > donor_noncoding_mut_freq.tsv")
donor_freq <- fread("donor_noncoding_mut_freq.tsv", header = FALSE)
View(donor_freq)
colnames(donor_freq) <- c("freq", "donor")
donor_freq[, weight := freq / sum(freq)]
donor_freq
final_dt
final_dt <- merge(final_dt, donor_freq, by = "donor", all.x = TRUE)
final_dt
final_dt[, prob := prob * weight]
any(is.na(final_dt$prob))
final_dt[, c("freq", "weight") := NULL]
final_dt
nrow(unique(final_dt))
## Get mutation-specific prob
## prob x >= K (K is the mutation freq, so here minus 1)
## ppoibin is used to get Pr(x<K)
prob_point <- final_dt[, .(p_val = 1 - poibin::ppoibin(length(donor) - 1, prob)),
by = .(mut_index)]
prob_point
.Machine$double.xmin
prob_point$p_val[1]
prob_point$p_val[1] < .Machine$double.xmin
.Machine
length(unique(final_dt$mut_index))
length(unique(final_dt$region_midpoint))
prob_mut$mut_index[duplicated(prob_mut$mut_index)]
prob_point$mut_index[duplicated(prob_point$mut_index)]
length(unique(final_dt$region_midpoint))
## Set 0 to minimal p value
prob_point[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
prob_point
final_dt
## Get mutation-specific prob
## prob x >= K (K is the mutation freq, so here minus 1)
## ppoibin is used to get Pr(x<K)
prob_point <- final_dt[, .(p_val = 1 - poibin::ppoibin(length(donor) - 1, prob),
donor_list = paste(donor, collapse = ",")),
by = .(mut_index)]
prob_point
## Set 0 to minimal p value
prob_point[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
## Set 0 to minimal p value
prob_point[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
prob_point
prob_point[order(p_val)]
prob_point = prob_point[order(p_val)]
openxlsx::write.xlsx(prob_point, file = "PointMutationList.xlsx")
final_dt
prob_point
## Get region prob
region_df <- merge(final_dt[, .(region_midpoint, mut_index)],
prob_point, by = "mut_index", all.x = TRUE)
region_df
prob_point
## Get region prob
region_df <- merge(final_dt[, .(region_midpoint, mut_index, donor)],
prob_point[, .(mut_index, p_val)],
by = "mut_index", all.x = TRUE)
region_df
p = c(0.1, 0.2, 0.3)
cumprod(p)
cal_region_p = function(p) {
1 - cumprod(1 - p)[length(p)]
}
cal_region_p(p)
prob_region <- region_df[, .(p_val = cal_region_p(p_val),
donor_list = paste(donor, collapse = ",")),
by = .(region_midpoint)]
prob_region
## Set 0 to minimal p value
prob_region[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
prob_region = prob_region[order(p_val)]
prob_region
region_df
final_dt
z = final_dt[, .(donor, prob, mut_index)]
nrow(unique(z))
z = final_dt[, .(donor, mut_index)]
nrow(unique(z))
## Get mutation-specific prob
## prob x >= K (K is the mutation freq, so here minus 1)
## ppoibin is used to get Pr(x<K)
final_dt2 <- unique(final_dt[, .(donor, prob, mut_index)])
prob_point <- final_dt2[, .(p_val = 1 - poibin::ppoibin(length(donor) - 1, prob),
donor_list = paste(donor, collapse = ",")),
by = .(mut_index)]
prob_point
prob_point$mut_index[duplicated(prob_point$mut_index)]
## Set 0 to minimal p value
prob_point[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
length(unique(final_dt$mut_index))
length(unique(final_dt$region_midpoint))
prob_point = prob_point[order(p_val)]
prob_point
openxlsx::write.xlsx(prob_point, file = "PointMutationList.xlsx")
z = final_dt[, .(donor, region_midpoint, prob)]
nrow(unique(z))
z = final_dt[, .(donor, region_midpoint)]
nrow(unique(z))
z = final_dt[, .(donor, region_midpoint, donor)]
nrow(unique(z))
## Get region prob
region_df <- merge(unique(final_dt[, .(region_midpoint, mut_index, donor)]),
prob_point[, .(mut_index, p_val)],
by = "mut_index", all.x = TRUE)
nrow(unique(final_dt[, .(region_midpoint, mut_index, donor)])
)
final_dt
## Get region prob
region_df <- merge(unique(final_dt[, .(region_midpoint, mut_index, donor)]),
prob_point[, .(mut_index, p_val)],
by = "mut_index", all.x = TRUE)
region_df
cal_region_p = function(p) {
1 - cumprod(1 - p)[length(p)]
}
prob_region <- region_df[, .(p_val = cal_region_p(p_val),
donor_list = paste(donor, collapse = ",")),
by = .(region_midpoint)]
## Set 0 to minimal p value
prob_region[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
prob_region = prob_region[order(p_val)]
prob_region
openxlsx::write.xlsx(prob_region, file = "RegionMutationList.xlsx")
region_df
prob_region <- region_df[, .(p_val = cal_region_p(p_val),
donor_list = paste(donor, collapse = ","),
mutation_list = paste(mut_index, collapse = ",")),
by = .(region_midpoint)]
prob_region
prob_region <- region_df[, .(p_val = cal_region_p(p_val),
donor_list = paste(donor, collapse = ","),
mutation_list = paste(unique(mut_index), collapse = ",")),
by = .(region_midpoint)]
## Set 0 to minimal p value
prob_region[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
prob_region = prob_region[order(p_val)]
prob_region
openxlsx::write.xlsx(prob_region, file = "RegionMutationList.xlsx")
library(data.table)
final_dt <- readRDS("final_mutation_regions.rds")
## Add a weight to prob for each donor to get sample-specific prob as Prof.Liu and JingZhang devised.
#system("zcat final_mutation.tsv.gz | cut -f 1 | sort | uniq -c | sed 's/^[ \t]*//g' | sed 's/ /\t/g' > donor_noncoding_mut_freq.tsv")
donor_freq <- fread("donor_noncoding_mut_freq.tsv", header = FALSE)
colnames(donor_freq) <- c("freq", "donor")
donor_freq[, weight := freq / sum(freq)]
final_dt <- merge(final_dt, donor_freq, by = "donor", all.x = TRUE)
final_dt[, prob := prob * weight]
any(is.na(final_dt$prob))
final_dt[, c("freq", "weight") := NULL]
## Get mutation-specific prob
## prob x >= K (K is the mutation freq, so here minus 1)
## ppoibin is used to get Pr(x<K)
final_dt2 <- unique(final_dt[, .(donor, prob, mut_index)])
prob_point <- final_dt2[, .(p_val = 1 - poibin::ppoibin(length(donor) - 1, prob),
donor_list = paste(donor, collapse = ",")),
by = .(mut_index)]
prob_point
prob_point$mut_index[duplicated(prob_point$mut_index)]
## Set 0 to minimal p value
prob_point[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
length(unique(final_dt$mut_index))
length(unique(final_dt$region_midpoint))
prob_point = prob_point[order(p_val)]
## Get region prob
region_df <- merge(unique(final_dt[, .(region_midpoint, mut_index, donor)]),
prob_point[, .(mut_index, p_val)],
by = "mut_index", all.x = TRUE)
region_df
cal_region_p = function(p) {
1 - cumprod(1 - p)[length(p)]
}
prob_region <- region_df[, .(p_val = cal_region_p(p_val),
donor_list = paste(donor, collapse = ","),
mutation_list = paste(unique(mut_index), collapse = ",")),
by = .(region_midpoint)]
## Set 0 to minimal p value
prob_region[, p_val := ifelse(p_val < .Machine$double.xmin,
.Machine$double.xmin,
p_val)]
prob_region = prob_region[order(p_val)]
prob_region
## Annotate records
# system(" cat ~/predict_prob/Homo_sapiens.GRCh37.75.gtf | grep gene | grep protein_coding > protein_coding_genes.tsv")
gene_dt <- fread("f:/zhangjing/protein_coding_genes.tsv", header = F)
head(gene_dt)
gene_dt <- gene_dt[V3 == "gene"]
extract_col <- function(x, name) {
library(magrittr)
stringr::str_extract(x, paste0(name, " ([^;]+);")) %>%
stringr::str_remove(paste0(name, " ")) %>%
stringr::str_remove_all("\"") %>%
stringr::str_remove(";")
}
gene_dt[, gene_name := extract_col(V9, "gene_name")]
gene_dt
"CDC20" %in% gene_dt$gene_name
"TERT" %in% gene_dt$gene_name
gene_df = gene_dt[, .(V1, V4, gene_name)]
gene_df
colnames(gene_df) = c("chr", "start", "gene_name")
save(gene_df, file = "gene_df.RData")
gene_df[, chr := paste0("chr",chr)]
gene_df
gene_df[, gene_start := start][, `:=`(start = gene_start - 5000, end = gene_start + 500)]
gene_df
prob_point
tidyr::separate(prob_point, col = "mut_index", into = c("chr", "start"), sep = ":")
prob_point = tidyr::separate(prob_point, col = "mut_index", into = c("chr", "start"), sep = ":")
prob_point
prob_point[, end := start]
prob_point
str(prob_point)
prob_point[, `:=`(start = as.integer(start), end = as.integer(end))]
str(gene_df)
setkey(gene_df, chr, start, end)
prob_point_final <- foverlaps(
prob_point,
gene_df,
type = "within"
)
prob_point_final
all(is.na(prob_point_final$gene_name))
sum(!is.na(prob_point_final$gene_name))
prob_point_final[!is.na(gene_name)]
prob_point_final[!is.na(gene_name)][, .(gene_name, i.start, p_value, donor_list)][order(p_value)]
prob_point_final[!is.na(gene_name)][, .(gene_name, i.start, p_val, donor_list)][order(p_val)]
prob_point_final = prob_point_final[!is.na(gene_name)][, .(gene_name, i.start, p_val, donor_list)][order(p_val)]
View(prob_point_final)
stringr::str_count("fds,fdsfg,sf,", ",")
prob_point_final$count = stringr::str_count(prob_point_final$donor_list, ",") + 1
openxlsx::write.xlsx(prob_point_final, file = "PointMutationList.xlsx")
prob_region
prob_region = tidyr::separate(prob_region, col = "region_midpoint", into = c("chr", "midpoint"), sep = ":")
prob_region
prob_region[, midpoint := as.integer(midpoint)][, start := midpoint - 5][, end := midpoint + 5]
prob_region
prob_region[, midpoint := as.integer(midpoint)][, start := midpoint - 5][, end := midpoint + 5]
prob_region
prob_region = as.data.table(prob_region)
prob_region[, midpoint := as.integer(midpoint)][, start := midpoint - 5][, end := midpoint + 5]
prob_region
prob_region_final <- foverlaps(
prob_region,
gene_df,
type = "within"
)
prob_region_final
, .(gene_name, chr, midpoint, p_val, donor_list)][
prob_region_final = prob_region_final[!is.na(gene_name)][
, .(gene_name, chr, midpoint, p_val, donor_list)][
order(p_val)]
prob_region_final
prob_region_final$count = stringr::str_count(prob_region_final$donor_list, ",") + 1
View(prob_region_final)
openxlsx::write.xlsx(prob_region_final, file = "RegionMutationList.xlsx")
final_dt <- readRDS("final_mutation_regions.rds")
View(final_dt)
